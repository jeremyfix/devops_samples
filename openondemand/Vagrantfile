# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"
MASTER_IMAGE = "ubuntu/focal64"
NODE_IMAGE = "ubuntu/focal64"
NODE_COUNT = 1

$hostscript = <<-SCRIPT
cp /etc/hosts /root && \
echo '192.168.50.2 front' >> /etc/hosts
echo '192.168.50.3 master' >> /etc/hosts
echo '192.168.50.4 node1' >> /etc/hosts
echo '192.168.50.5 node2' >> /etc/hosts
echo '192.168.50.6 node3' >> /etc/hosts
echo '192.168.50.7 node4' >> /etc/hosts
SCRIPT

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Define the master node, i.e. the scheduler node
  config.vm.define "master" do |master|
    master.vm.box = MASTER_IMAGE
    master.vm.hostname = "master"
    master.vm.network "private_network", ip:"192.168.50.3"
    # Provision the ssh key
    master.vm.provision "file",
      source: "./id_rsa", 
      destination: "~/.ssh/id_rsa"
    master.vm.provision "file",
      source: "./id_rsa.pub", 
      destination: "~/.ssh/id_rsa.pub"
    master.vm.provision "shell",
      privileged: false,
      inline: <<-SHELL
        chmod 0600 ~/.ssh/id_rsa
        cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
    SHELL
    # Install avahi to allow to ping the nodes 
    master.vm.provision "shell", inline: <<-SHELL
            apt update --quiet
            apt install -y --quiet avahi-daemon avahi-utils libnss-mdns
    SHELL

    # Make the hosts file
    master.vm.provision "shell", inline: $hostscript

    # Set port forward to access the services on the master
    config.vm.network "forwarded_port", guest: 80, host: 8080, auto_correct: true
    config.vm.network "forwarded_port", guest: 443, host: 8081, auto_correct: true

  end

  # Define the compute nodes
  (1..NODE_COUNT).each do |i|
    config.vm.define "node#{i}" do |node|
      node.vm.box = NODE_IMAGE
      node.vm.hostname = "node#{i}"
      node.vm.network "private_network", ip:"192.168.50.#{i+3}"
      # Provision the ssh key
      node.vm.provision "file",
        source: "./id_rsa", 
        destination: "~/.ssh/id_rsa"
      node.vm.provision "file",
        source: "./id_rsa.pub", 
        destination: "~/.ssh/id_rsa.pub"
      node.vm.provision "shell",
        privileged: false,
        inline: <<-SHELL
        chmod 0600 ~/.ssh/id_rsa
        cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
      SHELL
      # Install avahi to allow to ping the nodes 
      node.vm.provision "shell", 
        inline: <<-SHELL
                apt update --quiet
                apt install -y --quiet avahi-daemon avahi-utils libnss-mdns
      SHELL

      # Make the hosts file
      node.vm.provision "shell", inline: $hostscript
    end
  end
  
  # Define the front machine, the one on which ansible
  # is installed and from which the configuration will be deployed
  config.vm.define 'front' do |front|
    front.vm.box = MASTER_IMAGE
    front.vm.network "private_network", ip: "192.168.50.2"

    # Make the hosts file
    front.vm.provision "shell", inline: $hostscript
    
    front.vm.provision "file",
      source:"./libhwloc5_1.11.9-1_amd64.deb", 
      destination: "/tmp/libhwloc5_1.11.9-1_amd64.deb"
    front.vm.provision "file",
      source:"./slurm_20.02.3-1_amd64.deb", 
      destination: "/tmp/slurm_20.02.3-1_amd64.deb"
    front.vm.provision "shell",
      inline: "mkdir -p /opt/ansible/sources; mv /tmp/libhwloc5_1.11.9-1_amd64.deb /tmp/slurm_20.02.3-1_amd64.deb /opt/ansible/sources/"
    front.vm.provision :ansible_local do |ansible|
      ansible.playbook = "ansible/reinstall.yml"
      ansible.config_file = "ansible/etc/ansible.cfg"
      ansible.verbose = true
      ansible.install == true
      ansible.inventory_path = "inventory"
      ansible.limit="all"
    end
  end


end
